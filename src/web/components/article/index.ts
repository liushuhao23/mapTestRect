const fileList = {
  shortestToChar: { name: '字符的最短距离', path: 'task/shortestToChar' },
  symbolPolyfill: { name: 'symbol', path: 'task/symbolPolyfill' },
  CustomStack: { name: '设计一个支持增量操作的栈', path: 'task/CustomStack' },
  PromiseAllSettled: { name: 'PromiseAllSettled', path: 'task/PromiseAllSettled' },
  decodeString: { name: ' 字符串解码', path: 'task/decodeString' },
  sortedListToBST: { name: ' 有序链表转换二叉搜索树', path: 'task/sortedListToBST' },
  binaryTree: { name: '对称二叉树', path: 'tree/binaryTree' },
  pathSum: { name: '路径总和', path: 'tree/pathSum' },
  searchkNode: { name: '二叉搜索树的第k大节点', path: 'tree/searchkNode' },
  isSubtree: { name: ' 另一棵树的子树', path: 'tree/isSubtree' },
  levelOrder: { name: '二叉树的层序遍历', path: 'tree/levelOrder' },
  lowestCommonAncestor: { name: '二叉树的最近公共祖先', path: 'tree/lowestCommonAncestor' },
  sumNumbers: { name: '求根节点到叶节点数字之和', path: 'tree/sumNumbers' },
  linkedList: { name: '链表', path: 'tree/linkedList' },
  kmp: { name: 'kmp', path: 'string/kmp' },
  isValid: { name: '有效的括号', path: 'string/isValid' },
  lengthOfLongestSubstring: { name: '无重复字符的最长子串', path: 'string/lengthOfLongestSubstring' },
  combine: { name: '组合', path: 'string/combine' },
  restoreIpAddresses: { name: '复原ip地址', path: 'string/restoreIpAddresses' },
  generateParenthesis: { name: '括号生成', path: 'string/generateParenthesis' },
  isAnagram: { name: '有效的字母异位', path: 'hash/isAnagram' },
  mergeAlternately: { name: '交替合并字符串', path: 'day/mergeAlternately' },
  concurrency: { name: 'promise模拟接口请求并发限制', path: 'day/concurrency' },
  arraySign: { name: '数组元素积的符号', path: 'day/arraySign' },
  sumSubarrayMins: { name: '子数组的最小值之和', path: 'day/sumSubarrayMins' },
  treeConversionArr: { name: '数组转化成树，树转化成数组', path: 'day/treeConversionArr' },
  longestPalindrome: { name: '最长回文子串', path: 'dynamic/longestPalindrome' },
  Solution: { name: '斐波那契数', path: 'dynamic/Solution' },
  minCostClimbingStairs: { name: '使用最小花费爬楼梯', path: 'dynamic/minCostClimbingStairs' },
  uniquePaths: { name: '不同路径', path: 'dynamic/uniquePaths' },
  uniquePathsTwo: { name: '不同路径II', path: 'dynamic/uniquePathsTwo' },
  integerBreak: { name: '整数拆分', path: 'dynamic/integerBreak' },
  maxSubArray: { name: '最大子数组和', path: 'dynamic/maxSubArray' },
  findLength: { name: '最长重复子数组', path: 'dynamic/findLength' },
  longestCommonSubsequence: { name: '最长公共子序列', path: 'dynamic/longestCommonSubsequence' },
  findLengthOfLCIS: { name: '最长连续递增序列', path: 'dynamic/findLengthOfLCIS' },
  lengthOfLIS: { name: '最长上升子序列', path: 'dynamic/lengthOfLIS' },
  WeightBagProblem: { name: '0 1 背包理论', path: 'dynamic/WeightBagProblem' },
  WeightBagProblem1: { name: '0 1 背包理论(滚动数组)', path: 'dynamic/WeightBagProblem1' },
  lastStoneWeightII: { name: '最后一块石头的重量 II', path: 'dynamic/lastStoneWeightII' },
  generate: { name: '杨辉三角', path: 'dynamic/generate' },
  maxProfit: { name: '买卖股票的最佳时机', path: 'dynamic/maxProfit' },
  coinChange: { name: '零钱兑换', path: 'dynamic/coinChange' },
  minPathSum: { name: '最小路径和', path: 'dynamic/minPathSum' },
  singletonMode: { name: '单例模式', path: 'designMode/singletonMode' },
  factoryMode: { name: '工厂模式', path: 'designMode/factoryMode' },
  decoratorMode: { name: '装饰器模式', path: 'designMode/decoratorMode' },
  adapterMode: { name: '适配器模式', path: 'designMode/adapterMode' },
  proxyMode: { name: '代理模式', path: 'designMode/proxyMode' },
  publishmode: { name: '发布订阅模式', path: 'designMode/publishmode' },
  addToArrayFormC: { name: 'ooo', path: 'task/addToArrayFormC' }
}
export default fileList
